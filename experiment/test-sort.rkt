#lang racket/base
(require "../dbk/safe-unsafe.rkt" racket/fixnum racket/pretty)

(define (unsafe-fxvector-copy! vec.out out.start vec.in in.start in.end)
  (let loop ((in in.start) (out out.start))
    (when (unsafe-fx< in in.end)
      (unsafe-fxvector-set! vec.out out (unsafe-fxvector-ref vec.in in))
      (loop (unsafe-fx+ in 1) (unsafe-fx+ out 1)))))

(define (unsafe-fxvector-sort! z* start end) (unsafe-fxvector-sort!/<? unsafe-fx< z* start end))

(define (unsafe-fxvector-sort!/<? <? z* start end)
  (define (find-unsorted start end)
    (let loop ((i start) (z.prev (unsafe-fxvector-ref z* start)))
      (let ((i+1 (unsafe-fx+ i 1)))
        (if (unsafe-fx= i+1 end)
            i+1
            (let ((z (unsafe-fxvector-ref z* i+1)))
              (if (<? z z.prev) i+1 (loop i+1 z)))))))
  (when (unsafe-fx< start end)
    (let ((start.unsorted (find-unsorted start end)))
      (when (unsafe-fx< start.unsorted end)
        (unsafe-fxvector-sort!/buffer/<?/start.unsorted
          <? (make-fxvector (unsafe-fx- end start)) 0 z* start start.unsorted end)))))

(define (unsafe-fxvector-sort!/buffer/<? <? z*.buffer start.buffer z* start end)
  (define (find-unsorted start end)
    (let loop ((i start) (z.prev (unsafe-fxvector-ref z* start)))
      (let ((i+1 (unsafe-fx+ i 1)))
        (if (unsafe-fx= i+1 end)
            i+1
            (let ((z (unsafe-fxvector-ref z* i+1)))
              (if (<? z z.prev) i+1 (loop i+1 z)))))))
  (when (unsafe-fx< start end)
    (let ((start.unsorted (find-unsorted start end)))
      (when (unsafe-fx< start.unsorted end)
        (unsafe-fxvector-sort!/buffer/<?/start.unsorted
          <? z*.buffer start.buffer z* start start.unsorted end)))))

(define (unsafe-fxvector-sort!/buffer/<?/start.unsorted
          <? z*.buffer start.buffer z* start start.unsorted end)
  (define (i<i.buffer? i i.buffer) (<? (unsafe-fxvector-ref z*        i)
                                       (unsafe-fxvector-ref z*.buffer i.buffer)))
  (define (find-unsorted start end)
    (let loop ((i start) (z.prev (unsafe-fxvector-ref z* start)))
      (let ((i+1 (unsafe-fx+ i 1)))
        (if (unsafe-fx= i+1 end)
            i+1
            (let ((z (unsafe-fxvector-ref z* i+1)))
              (if (<? z z.prev) i+1 (loop i+1 z)))))))
  (when (unsafe-fx< start.unsorted end)
    (let sort-range! ((start start) (start.unsorted start.unsorted) (end end))
      (let ((diff (unsafe-fx- end start)))
        (when (unsafe-fx< 1 diff)
          (let* ((mid (let ((mid (unsafe-fx+ start (unsafe-fxrshift diff 1))))
                        (cond ((unsafe-fx< start.unsorted mid)
                               (sort-range! start start.unsorted mid)
                               (let ((start.unsorted (find-unsorted mid end)))
                                 (when (unsafe-fx< start.unsorted end)
                                   (sort-range! mid start.unsorted end)))
                               mid)
                              ((unsafe-fx<= end (unsafe-fx+ start.unsorted 1))
                               start.unsorted)
                              (else (let* ((mid            start.unsorted)
                                           (start.unsorted (find-unsorted mid end)))
                                      (when (unsafe-fx< start.unsorted end)
                                        (sort-range! mid start.unsorted end))
                                      mid)))))
                 (start (let ((z.mid (unsafe-fxvector-ref z* mid)))
                          (let loop ((start start) (end mid))
                            (if (unsafe-fx< start end)
                                (let ((i (unsafe-fx+ (unsafe-fxrshift (unsafe-fx- end start) 1)
                                                     start)))
                                  (if (<? z.mid (unsafe-fxvector-ref z* i))
                                      (loop start            i)
                                      (loop (unsafe-fx+ i 1) end)))
                                end)))))
            (when (unsafe-fx< start mid)
              (unsafe-fxvector-copy! z*.buffer start.buffer z* start mid)
              (let ((end.buffer (unsafe-fx+ start.buffer (unsafe-fx- mid start))))
                (let merge! ((i.buffer start.buffer) (i mid) (out start))
                  (if (i<i.buffer? i i.buffer)
                      (let ((i+1 (unsafe-fx+ i 1)) (out+1 (unsafe-fx+ out 1)))
                        (unsafe-fxvector-set! z* out (unsafe-fxvector-ref z* i))
                        (if (unsafe-fx< i+1 end)
                            (merge! i.buffer i+1 out+1)
                            (unsafe-fxvector-copy! z* out+1 z*.buffer i.buffer end.buffer)))
                      (let ((i+1.buffer (unsafe-fx+ i.buffer 1)))
                        (unsafe-fxvector-set! z* out (unsafe-fxvector-ref z*.buffer i.buffer))
                        (when (unsafe-fx< i+1.buffer end.buffer)
                          (merge! i+1.buffer i (unsafe-fx+ out 1))))))))))))))


(define (test-fxvector-sort z*)
  (displayln `(trying: ,z*))
  (let* ((z*.sorted (sort z* <))
         (len       (length z*))
         (fx*       (make-fxvector len)))
    (let ((i 0))
      (for-each
        (lambda (z)
          (fxvector-set! fx* i z)
          (set! i (+ i 1)))
        z*))
    (unsafe-fxvector-sort! fx* 0 len)
    (let ((i 0))
      (for-each
        (lambda (z)
          (unless (eq? (fxvector-ref fx* i) z)
            (error "not sorted" z*.sorted fx*))
          (set! i (+ i 1)))
        z*.sorted))
    (display "success: ")
    (write z*)
    (newline)))

(define ((random-list/k k) len)
  (let loop ((i 0))
    (if (< i len)
        (cons (random k) (loop (+ i 1)))
        '())))
(define random-list (random-list/k 20))

(for-each
  test-fxvector-sort
  (append
    '(()
      (1)
      (1 2 3)
      (1 2 3 4 5 6 7 8 9)
      (1 2 3 4 5 6 7 8 9 0)
      (0 9 6 11 19 3 9 15 11 14)
      (3 18 9 2 5 15 12 8 15 9 10 8 7 0 2 19 16 12 0 6)
      (8 3 9 17 5 4 3 12 16 5 13 10 4 13 16 9 19 18 5 9 18 8 15 1 8 10 13 12 5 18)
      (1 2 3 0 9 6 11 19 3 9 15 11 14)
      (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 0 9 6 11 19 3 9 15 11 14)
      (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 0 1 2 3 4 5 9 6 11 19 3 9 15 11 14)
      (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 8 9 6 11 19 3 9 15 11 14)
      )
    (list
      (random-list 10)
      (random-list 20)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      (random-list 30)
      )))
