#lang racket/base
(require
  racket/fixnum
  racket/unsafe/ops
  )

(define count 32)
;(define width 4)
(define width 3)
;(define width (read))
(define total (* count width))
(define bstr  (make-bytes total))
(define vec   (make-vector 1))

(define (bytes-nat-set! n size __ ___ bs offset)
  ;(integer->integer-bytes n size #f #t bs offset) (void)
  (let ((end (+ offset size)))
    (let loop ((i offset) (shift (* 8 (- size 1))))
      (cond ((< i end) (bytes-set! bs i (fxand 255 (fxrshift n shift)))
                       (loop (+ i 1) (- shift 8)))
            (else      bs)))))
;(define (unsafe-bytes-nat-set! n size __ ___ bs offset)
  ;(let ((end (unsafe-fx+ offset size)))
    ;(let loop ((i offset) (shift (unsafe-fx* 8 (unsafe-fx- size 1))))
      ;(cond ((unsafe-fx< i end) (unsafe-bytes-set! bs i (unsafe-fxand 255 (unsafe-fxrshift n shift)))
                                ;(loop (unsafe-fx+ i 1) (unsafe-fx- shift 8)))
            ;(else               bs)))))

(define (unsafe-bytes-nat-set! n size __ ___ bs offset)
  (let loop ((i     offset)
             ;(shift (unsafe-fx* 8 (unsafe-fx- size 1)))
             (shift (unsafe-fxlshift (unsafe-fx- size 1) 3))
             )
    (when (unsafe-fx<= 0 shift)
      (unsafe-bytes-set! bs i (unsafe-fxand 255 (unsafe-fxrshift n shift)))
      (loop (unsafe-fx+ i     1)
            (unsafe-fx- shift 8)))))

(define (unrolled-unsafe-bytes-nat-set!/1 n size __ ___ bs i)
  ;; assume size=1
  (unsafe-bytes-set! bs i n)
  )

(define (unrolled-unsafe-bytes-nat-set!/2 n size __ ___ bs i)
  ;; assume size=2
  (unsafe-bytes-set! bs i       (unsafe-fxand 255 (unsafe-fxrshift n 8)))
  (unsafe-bytes-set! bs (+ i 1) (unsafe-fxand 255 n))
  )

(define (unrolled-unsafe-bytes-nat-set!/3 n size __ ___ bs i)
  ;; assume size=3
  (unsafe-bytes-set! bs i       (unsafe-fxand 255 (unsafe-fxrshift n 16)))
  (unsafe-bytes-set! bs (+ i 1) (unsafe-fxand 255 (unsafe-fxrshift n 8)))
  (unsafe-bytes-set! bs (+ i 2) (unsafe-fxand 255 n))
  )

(define (unrolled-unsafe-bytes-nat-set!/4 n size __ ___ bs i)
  ;; assume size=4
  (unsafe-bytes-set! bs i       (unsafe-fxand 255 (unsafe-fxrshift n 24)))
  (unsafe-bytes-set! bs (+ i 1) (unsafe-fxand 255 (unsafe-fxrshift n 16)))
  (unsafe-bytes-set! bs (+ i 2) (unsafe-fxand 255 (unsafe-fxrshift n 8)))
  (unsafe-bytes-set! bs (+ i 3) (unsafe-fxand 255 n))
  )

(define (unrolled-unsafe-bytes-nat-set!/5 n size __ ___ bs i)
  ;; assume size=5
  (unsafe-bytes-set! bs i       (unsafe-fxand 255 (unsafe-fxrshift n 32)))
  (unsafe-bytes-set! bs (+ i 1) (unsafe-fxand 255 (unsafe-fxrshift n 24)))
  (unsafe-bytes-set! bs (+ i 2) (unsafe-fxand 255 (unsafe-fxrshift n 16)))
  (unsafe-bytes-set! bs (+ i 3) (unsafe-fxand 255 (unsafe-fxrshift n 8)))
  (unsafe-bytes-set! bs (+ i 4) (unsafe-fxand 255 n))
  )

(define (unrolled-unsafe-bytes-nat-set!/6 n size __ ___ bs i)
  ;; assume size=6
  (unsafe-bytes-set! bs i       (unsafe-fxand 255 (unsafe-fxrshift n 36)))
  (unsafe-bytes-set! bs (+ i 1) (unsafe-fxand 255 (unsafe-fxrshift n 32)))
  (unsafe-bytes-set! bs (+ i 2) (unsafe-fxand 255 (unsafe-fxrshift n 24)))
  (unsafe-bytes-set! bs (+ i 3) (unsafe-fxand 255 (unsafe-fxrshift n 16)))
  (unsafe-bytes-set! bs (+ i 4) (unsafe-fxand 255 (unsafe-fxrshift n 8)))
  (unsafe-bytes-set! bs (+ i 5) (unsafe-fxand 255 n))
  )

(define (unrolled-unsafe-bytes-nat-set! n size __ ___ bs offset)
  (case size
    ((1) (unrolled-unsafe-bytes-nat-set!/1 n size __ ___ bs offset))
    ((2) (unsafe-bytes-set! bs offset       (unsafe-fxand 255 (unsafe-fxrshift n 8)))
         (unsafe-bytes-set! bs (+ offset 1) (unsafe-fxand 255 n)))
    ((3) (unrolled-unsafe-bytes-nat-set!/3 n size __ ___ bs offset))
    ((4) (unrolled-unsafe-bytes-nat-set!/4 n size __ ___ bs offset))
    ((5) (unrolled-unsafe-bytes-nat-set!/5 n size __ ___ bs offset))
    ((6) (unrolled-unsafe-bytes-nat-set!/6 n size __ ___ bs offset))
    (else (let loop ((i     offset)
                     ;(shift (unsafe-fx* 8 (unsafe-fx- size 1)))
                     (shift (unsafe-fxlshift (unsafe-fx- size 1) 3))
                     )
            (when (unsafe-fx<= 0 shift)
              (unsafe-bytes-set! bs i (unsafe-fxand 255 (unsafe-fxrshift n shift)))
              (loop (unsafe-fx+ i     1)
                    (unsafe-fx- shift 8)))))))

;(define (unrolled-unsafe-bytes-nat-set! n size __ ___ bs offset)
  ;(case size
    ;((1) (unrolled-unsafe-bytes-nat-set!/1 n size __ ___ bs offset))
    ;((2) (unrolled-unsafe-bytes-nat-set!/2 n size __ ___ bs offset))
    ;((3) (unrolled-unsafe-bytes-nat-set!/3 n size __ ___ bs offset))
    ;((4) (unrolled-unsafe-bytes-nat-set!/4 n size __ ___ bs offset))
    ;(else (let loop ((i     offset)
                     ;;(shift (unsafe-fx* 8 (unsafe-fx- size 1)))
                     ;(shift (unsafe-fxlshift (unsafe-fx- size 1) 3))
                     ;)
            ;(when (unsafe-fx<= 0 shift)
              ;(bytes-set! bs i (unsafe-fxand 255 (unsafe-fxrshift n shift)))
              ;(loop (unsafe-fx+ i     1)
                    ;(unsafe-fx- shift 8)))))))

;(define i->ibs integer->integer-bytes)
;(define i->ibs bytes-nat-set!)
;(define i->ibs unsafe-bytes-nat-set!)
(define i->ibs unrolled-unsafe-bytes-nat-set!)

(time
  (let repeat ((i 10000000))
    (when (< 0 i)
      (let loop ((i (- total width)))
        (when (unsafe-fx<= 0 i)
          (i->ibs i width #f #f bstr i)
          (loop (unsafe-fx- i width))))
      (repeat (unsafe-fx- i 1)))))

#;(define (unsafe-bytes-byte-width-nat-ref bs width offset)
  (let ((end (unsafe-fx+ offset width)))
    (let loop ((i offset) (n 0))
      (cond ((unsafe-fx< i end) (loop (unsafe-fx+ i 1)
                                      (unsafe-fx+ (unsafe-fxlshift n 8)
                                                  (unsafe-bytes-ref bs i))))
            (else               n)))))

(define (1-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-bytes-ref bs i))
(define (2-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-fx+ (unsafe-fxlshift (unsafe-bytes-ref bs i) 8)
              (unsafe-bytes-ref bs (unsafe-fx+ i 1))))
(define (3-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-fx+ (unsafe-fxlshift (unsafe-bytes-ref bs             i)    16)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 1))  8)
              (unsafe-bytes-ref                  bs (unsafe-fx+ i 2))))
(define (4-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-fx+ (unsafe-fxlshift (unsafe-bytes-ref bs             i)    24)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 1)) 16)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 2))  8)
              (unsafe-bytes-ref                  bs (unsafe-fx+ i 3))))
(define (5-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-fx+ (unsafe-fxlshift (unsafe-bytes-ref bs             i)    32)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 1)) 24)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 2)) 16)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 3))  8)
              (unsafe-bytes-ref                  bs (unsafe-fx+ i 4))))
(define (6-unrolled-unsafe-bytes-nat-ref bs i)
  (unsafe-fx+ (unsafe-fxlshift (unsafe-bytes-ref bs             i)    40)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 1)) 32)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 2)) 24)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 3)) 16)
              (unsafe-fxlshift (unsafe-bytes-ref bs (unsafe-fx+ i 4))  8)
              (unsafe-bytes-ref                  bs (unsafe-fx+ i 5))))

(define (unsafe-bytes-byte-width-nat-ref bs width offset)
  (case width
    ((1) (1-unrolled-unsafe-bytes-nat-ref bs offset))
    ((2) (2-unrolled-unsafe-bytes-nat-ref bs offset))
    ((3) (3-unrolled-unsafe-bytes-nat-ref bs offset))
    ((4) (4-unrolled-unsafe-bytes-nat-ref bs offset))
    ((5) (5-unrolled-unsafe-bytes-nat-ref bs offset))
    ((6) (6-unrolled-unsafe-bytes-nat-ref bs offset))
    (else (let ((end (unsafe-fx+ offset width)))
            (let loop ((i offset) (n 0))
              (cond ((unsafe-fx< i end) (loop (unsafe-fx+ i 1)
                                              (unsafe-fx+ (unsafe-fxlshift n 8)
                                                          (unsafe-bytes-ref bs i))))
                    (else               n)))))))

(time
  (let repeat ((i 10000000))
    (when (< 0 i)
      (let loop ((i (- total width)))
        (when (unsafe-fx<= 0 i)
          (unsafe-vector-set! vec 0 (unsafe-bytes-byte-width-nat-ref bstr width i))
          (loop (unsafe-fx- i width))))
      (repeat (unsafe-fx- i 1)))))

