#lang racket/base
(provide (all-from-out "concrete-syntax.rkt")
         _ not and or if when unless cond begin let let* lambda quasiquote
         apply append map/merge map/append map filter filter-not)
(require "concrete-syntax.rkt"
         (for-syntax racket/base) racket/stxparam
         (rename-in "misc.rkt"
                    (map/merge  rkt:map/merge)
                    (map/append rkt:map/append))
         (rename-in racket/base
                    (_          rkt:_)
                    (not        rkt:not)
                    (and        rkt:and)
                    (or         rkt:or)
                    (begin      rkt:begin)
                    (let        rkt:let)
                    (let*       rkt:let*)
                    (lambda     rkt:lambda)
                    (if         rkt:if)
                    (when       rkt:when)
                    (unless     rkt:unless)
                    (cond       rkt:cond)
                    (quasiquote rkt:quasiquote)
                    (apply      rkt:apply)
                    (append     rkt:append)
                    (map        rkt:map)
                    (filter     rkt:filter))
         (rename-in racket/list
                    (filter-not rkt:filter-not)))

(define-syntax-rule (define-alias/term name name.term name.else)
  (define-syntax (name stx)
    (case (current-vocabulary)
      ((term) (syntax-case stx ()
                ((_ . args) #'(name.term . args))
                (_          #'name.term)))
      (else   (syntax-case stx ()
                ((_ . args) #'(name.else . args))
                (_          #'name.else))))))

(define-syntax-rule (define-alias/formula&term name name.formula name.term name.else)
  (define-syntax (name stx)
    (case (current-vocabulary)
      ((formula) (syntax-case stx ()
                   ((_ . args) #'(name.formula . args))
                   (_          #'name.formula)))
      ((term)    (syntax-case stx ()
                   ((_ . args) #'(name.term . args))
                   (_          #'name.term)))
      (else      (syntax-case stx ()
                   ((_ . args) #'(name.else . args))
                   (_          #'name.else))))))

(define-alias/formula&term not   negate         dbk:not   rkt:not)
(define-alias/formula&term and   conj           dbk:and   rkt:and)
(define-alias/formula&term or    disj           dbk:or    rkt:or)
(define-alias/formula&term apply apply-relation dbk:apply rkt:apply)

(define-alias/term begin      dbk:begin      rkt:begin)
(define-alias/term let        dbk:let        rkt:let)
(define-alias/term let*       dbk:let*       rkt:let*)
(define-alias/term lambda     dbk:lambda     rkt:lambda)
(define-alias/term if         dbk:if         rkt:if)
(define-alias/term when       dbk:when       rkt:when)
(define-alias/term unless     dbk:unless     rkt:unless)
(define-alias/term cond       dbk:cond       rkt:cond)
(define-alias/term quasiquote dbk:quasiquote rkt:quasiquote)
(define-alias/term _          ??             rkt:_)

(define-alias/term append     dbk:append     rkt:append)
(define-alias/term map/merge  dbk:map/merge  rkt:map/merge)
(define-alias/term map/append dbk:map/append rkt:map/append)
(define-alias/term map        dbk:map        rkt:map)
(define-alias/term filter     dbk:filter     rkt:filter)
(define-alias/term filter-not dbk:filter-not rkt:filter-not)

(define-syntax (dbk:quasiquote/level stx)
  (syntax-case stx (quasiquote unquote unquote-splicing)
    ((_ level   (quasiquote       q))         #'(dbk:term (list 'quasiquote       (dbk:quasiquote/level (level) q))))
    ((_ (level) (unquote          q))         #'(dbk:term (list 'unquote          (dbk:quasiquote/level level   q))))
    ((_ (level) (unquote-splicing q))         #'(dbk:term (list 'unquote-splicing (dbk:quasiquote/level level   q))))
    ((_ ()      (unquote          e))         #'(dbk:term e))
    ((_ ()      ((unquote-splicing e) . q.d)) #'(dbk:append (dbk:term e) (dbk:quasiquote/level ()    q.d)))
    ((_ level   (q.a . q.d))                  #'(dbk:cons                (dbk:quasiquote/level level q.a)
                                                                         (dbk:quasiquote/level level q.d)))
    ((_ level   #(q ...))                     #'(dbk:list->vector        (dbk:quasiquote/level level (q ...))))
    ((_ level   quasiquote)                   (raise-syntax-error #f "misplaced quasiquote"       stx))
    ((_ level   unquote)                      (raise-syntax-error #f "misplaced unquote"          stx))
    ((_ level   unquote-splicing)             (raise-syntax-error #f "misplaced unquote-splicing" stx))
    ((_ level   q)                            #'(dbk:term (quote q)))))

(define-syntax-rule (dbk:quasiquote q) (dbk:quasiquote/level () q))
