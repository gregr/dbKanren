#lang racket/base
(provide (all-from-out "concrete-syntax.rkt")
         not and or if when unless cond begin let let* lambda quasiquote)
(require "concrete-syntax.rkt"
         (for-syntax racket/base) racket/stxparam
         (rename-in racket/base
                    (not        rkt:not)
                    (and        rkt:and)
                    (or         rkt:or)
                    (begin      rkt:begin)
                    (let        rkt:let)
                    (let*       rkt:let*)
                    (lambda     rkt:lambda)
                    (if         rkt:if)
                    (when       rkt:when)
                    (unless     rkt:unless)
                    (cond       rkt:cond)
                    (quasiquote rkt:quasiquote)))

(define-syntax-rule (define-alias/term name name.term name.else)
  (define-syntax (name stx)
    (case (syntax-parameter-value #'current-vocabulary)
      ((term) (syntax-case stx ()
                ((_ . args) #'(name.term . args))
                (_          #'name.term)))
      (else   (syntax-case stx ()
                ((_ . args) #'(name.else . args))
                (_          #'name.else))))))

(define-syntax-rule (define-alias/formula&term name name.formula name.term name.else)
  (define-syntax (name stx)
    (case (syntax-parameter-value #'current-vocabulary)
      ((formula) (syntax-case stx ()
                   ((_ . args) #'(name.formula . args))
                   (_          #'name.formula)))
      ((term)    (syntax-case stx ()
                   ((_ . args) #'(name.term . args))
                   (_          #'name.term)))
      (else      (syntax-case stx ()
                   ((_ . args) #'(name.else . args))
                   (_          #'name.else))))))

(define-alias/formula&term not negate dbk:not rkt:not)
(define-alias/formula&term and conj   dbk:and rkt:and)
(define-alias/formula&term or  disj   dbk:or  rkt:or)

(define-alias/term begin      dbk:begin      rkt:begin)
(define-alias/term let        dbk:let        rkt:let)
(define-alias/term let*       dbk:let*       rkt:let*)
(define-alias/term lambda     dbk:lambda     rkt:lambda)
(define-alias/term if         dbk:if         rkt:if)
(define-alias/term when       dbk:when       rkt:when)
(define-alias/term unless     dbk:unless     rkt:unless)
(define-alias/term cond       dbk:cond       rkt:cond)
(define-alias/term quasiquote dbk:quasiquote rkt:quasiquote)
